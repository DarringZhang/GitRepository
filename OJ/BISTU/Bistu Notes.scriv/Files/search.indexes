<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="3"/>
        <Document ID="4">
            <Title>BistuAcmWeeklyTraining</Title>
        </Document>
        <Document ID="5"/>
        <Document ID="6"/>
        <Document ID="7">
            <Title>the 11th ICPC</Title>
        </Document>
        <Document ID="8">
            <Title>20190305</Title>
        </Document>
        <Document ID="9">
            <Title>A</Title>
        </Document>
        <Document ID="10">
            <Title>A</Title>
            <Text>#include&lt;iostream&gt;
using namespace std;

int main(void) {
	long long m,n,a;   //考虑相乘后结果就大于 10^9
	cin&gt;&gt;m&gt;&gt;n&gt;&gt;a;     //  int/long  2* 10 ^9   	longlong = 9 * 10^18    lld
	if(n%a == 0 &amp;&amp; m%a != 0 ){
		cout&lt;&lt; (m/a) * (n/a) +  n/a  &lt;&lt; endl; 
	}
	else if(m%a == 0 &amp;&amp; n%a != 0){
		cout&lt;&lt; (m/a) * (n/a) +  m/a  &lt;&lt; endl; 
	}
	else if(n%a != 0 &amp;&amp; m%a != 0){
		cout&lt;&lt; (m/a) * (n/a) +  m/a + n/a  + 1 &lt;&lt; endl;
	} 
	else if(n%a == 0 &amp;&amp; m%a == 0){
		cout&lt;&lt; (m/a) * (n/a)&lt;&lt;endl;
	}
	return 0;
}

—————————————————————严肃的分割线———————————————————————————————————-


Improving
/*
  简化上述四行代码为一行
        cout&lt;&lt;(a/c+(a%c!=0))*(b/c+(b%c!=0));
            展开： (a/c) * b/c +
            (a/c) * (b%c!=0) + 
            (b/c) * (a%c!=0) +
            (a%c!=0) * (b%c!=0)
 */

/*
    不间断输入：
    while(scanf(&quot;%lld%lld%lld&quot;,&amp;a,&amp;b,&amp;c) !=EOF){
    }
*/</Text>
        </Document>
        <Document ID="11">
            <Title>B</Title>
            <Text>哈哈哈哈</Text>
        </Document>
        <Document ID="12">
            <Title>E</Title>
            <Text>#include&lt;iostream&gt;
#include &lt;string.h&gt;      //引入函数 strlen ，但是接受的参数是char*,         string 也可使用.size()获得长度
using namespace std;

int main(void) {
    int n;
    int length;
    cin &gt;&gt; n;
    string s;
    while(n--){
        cin &gt;&gt; s;
        length = strlen(s.c_str());   //.c_str() 将string转换为char数组
                           if(length &lt;= 10){
            cout&lt;&lt;s&lt;&lt;endl;
        }
        else{
            cout&lt;&lt;s[0]&lt;&lt;length-2&lt;&lt; s[length-1]&lt;&lt;endl;
        }
    }

}

—————————————————————严肃的分割线———————————————————————————————————-


Improving
万能头文件  ：     #include&lt;bits/stdc++.h&gt;
     用字符串初始化字符数组时，系统会在字符数组的末尾自动加上一个字符&quot;\0&quot;，因此数组的大小比字符串中实际字符的个数大。
     如：sizeof(str1)=strlen(str1) +1</Text>
        </Document>
        <Document ID="13">
            <Title>C</Title>
            <Text>#include &lt;iostream&gt;
using namespace std;

/*用个结构体数组，结构体里面放出现的gram字符对和它出现的个数
难度在于 每次都要在结构体数组扫一遍，没有就添加
 还不如一开始就开26*26数组  表示A~Z 分别组合
 暴力扫描并找最大                                    ——————— 解题思路最重要
 */
 int main() {
     long long n;
     char a[110];
     cin &gt;&gt; n &gt;&gt; a;
     int gram[27][27] = {0};//初始化每对可能的gram数 = 0

     for(int i = 0; i &lt; 26 ; ++i){
         for(int j = 0 ; j &lt; 26 ; ++j){
             for(int k = 1; a[k] != '\0'; k++){ //一直读到字符串末尾
                if(a[k-1] -'A' == i &amp;&amp; a[k] - 'A' == j){ //将字符转换成数字和ij对应的A~Z字母比较
                    gram[i][j] ++;
                }
             }
         }
     }

     int big_count = 0;
     int i_index = 0;
     int j_index = 0;
     //暴力找出出现次数最多的gram
     for(int i = 0; i &lt; 26; ++i){
         for(int j = 0; j &lt; 26; j++){
             if(gram[i][j] &gt; big_count){
                 big_count  =  gram[i][j];
                 //记载出现次数最多的 gram 字母下标
                 i_index = i;
                 j_index = j;
             }
         }
     }
     cout &lt;&lt; (char) (i_index + 'A') &lt;&lt; (char) (j_index + 'A');//将数字转换成字符
    return 0;
}</Text>
        </Document>
        <Document ID="14">
            <Title>D</Title>
            <Text>#include &lt;bits/stdc++.h&gt;
using namespace std;

//重点思路是排序sort

int main() {
    int a[222222];
    int count,aim;
    cin&gt;&gt; count&gt;&gt;aim;//比结果小或等的数有aim个
    for(int i = 0; i &lt; count; ++i){
        cin &gt;&gt; a[i];
    }
    sort(a,a+count);

    //首先考虑数组下标的情况，数组下标要&gt;=0;所以aim==0挑出来
    if(aim==0){  //没有比结果小或等的数
        if(a[0] &gt; 1){//最小的数都大于一了，没有比  一  更小的数，1是最小的
            cout &lt;&lt; 1;
        }
        else{
            cout &lt;&lt; -1;//最小的数 = 1 ，不存在结果在最小的数1前面
        }
        return 0;
    }

    if(a[aim] == a[aim-1]) cout &lt;&lt;-1;//第aim 个数  个它后面的相等，即要么就没有，要么就成对个
    else cout &lt;&lt;a[aim-1]; //结果就是第aim个数,小于或等于第aim数
    return 0;
}





—————————————————————严肃的分割线———————————————————————————————————

所以int型的数组我申请的222222个
￼
</Text>
        </Document>
        <Document ID="15">
            <Title>F</Title>
            <Text>#include &lt;bits/stdc++.h&gt;
using namespace std;

int main() {
   int n,m,k;  //n处破了，棍子长m, 可用k段胶带
           int a[111111];
    cin &gt;&gt;n&gt;&gt;m&gt;&gt;k;
    for(int i = 0; i &lt; n; ++i){
        cin &gt;&gt; a[i];
    }
    int cha[111111];
    //cha数组存储洞的大小
            for(int i = 0; i &lt; n-1; ++i){
        cha[i] = a[i+1] -a[i];
    }
    sort(cha,cha+n-1);

    long long sum = 0;
    for(int i = 0; i &lt; n-k; ++i){   //前n-k个小片段是完全可以用一块胶带粘的，所以sum成这一块胶带的长度（都一块一块粘的话，用的胶带数太多，规定只有k块）
        	sum += cha[i];
    }
    cout&lt;&lt;sum+k;//后k段直接用k-1 个1cm的胶带覆盖（这些是不可以合并的洞）
    return 0;
}


实际上： sum+k  是 [a-k] +1  + (k-1)
长度 = 最大－最小 + 1;</Text>
        </Document>
    </Documents>
</SearchIndexes>
